substitutions:
  devicename: tagreader
  friendly_name: Tag Reader
  pin_buzzer: D8
  pin_activity_led: D7
  sound_success: "success:d=24,o=5,b=100:c,g,b"
  sound_scan_ok: "beep:d=16,o=5,b=100:b"
  sound_scan_ko: "beep:d=8,o=5,b=100:b"
  sound_scan_success: "success:d=24,o=5,b=100:c,g,b"


esphome:
  name: $devicename
  friendly_name: ${friendly_name}
  platform: ESP8266
  board: d1_mini
  # If buzzer is enabled, notify on api connection success
  on_boot:
    priority: -10
    then:
    - wait_until:
        api.connected:
    - logger.log: API is connected!
    - rtttl.play: ${sound_success}
    - light.turn_on:
        id: activity_led
        brightness: 100%
        red: 0%
        green: 0%
        blue: 100%
        flash_length: 500ms
    - switch.turn_on: buzzer_enabled
    - switch.turn_on: led_enabled


packages:
  wifi: !include common/wifi.yaml
  always: !include common/always.yaml


# Define switches to control LED and buzzer from HA
switch:
- platform: template
  name: Buzzer Enabled
  id: buzzer_enabled
  icon: mdi:volume-high
  optimistic: true
  restore_state: true

- platform: template
  name: LED Enabled
  id: led_enabled
  icon: mdi:alarm-light-outline
  optimistic: true
  restore_state: true


# Enable Home Assistant API
api:
  services:
  - service: rfidreader_tag_ok
    then:
    - rtttl.play: ${sound_scan_ok}

  - service: rfidreader_tag_ko
    then:
    - rtttl.play: ${sound_scan_ko}

  - service: play_rtttl
    variables:
      song_str: string
    then:
    - rtttl.play: !lambda 'return song_str;'

  - service: write_tag_random
    then:
    - lambda: |-
        static const char alphanum[] = "0123456789abcdef";
        std::string uri = "https://www.home-assistant.io/tag/";
        for (int i = 0; i < 8; i++)
          uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
        uri += "-";
        for (int j = 0; j < 3; j++) {
          for (int i = 0; i < 4; i++)
            uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
          uri += "-";
        }
        for (int i = 0; i < 12; i++)
          uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
        auto message = new nfc::NdefMessage();
        message->add_uri_record(uri);
        ESP_LOGD("tagreader", "Writing payload: %s", uri.c_str());
        id(pn532_board).write_mode(message);

  - service: write_tag_id
    variables:
      tag_id: string
    then:
    - light.turn_on:
        id: activity_led
        brightness: 100%
        red: 100%
        green: 0%
        blue: 0%
    - lambda: |-
        auto message = new nfc::NdefMessage();
        std::string uri = "https://www.home-assistant.io/tag/";
        uri += tag_id;
        message->add_uri_record(uri);
        id(pn532_board).write_mode(message);
    - wait_until:
        not:
          pn532.is_writing:
    - light.turn_off:
        id: activity_led

  - service: clean_tag
    then:
    - light.turn_on:
        id: activity_led
        brightness: 100%
        red: 100%
        green: 64.7%
        blue: 0%
    - lambda: 'id(pn532_board).clean_mode();'
    - wait_until:
        not:
          pn532.is_writing:
    - light.turn_off:
        id: activity_led

  - service: cancel_writing
    then:
    - lambda: 'id(pn532_board).read_mode();'

i2c:
  scan: False
  frequency: 400kHz

pn532_i2c:
  id: pn532_board
  on_tag:
    then:
    - homeassistant.tag_scanned: !lambda |
        if (!tag.has_ndef_message()) {
          ESP_LOGD("tagreader", "No NDEF");
          return x;
        }
        auto message = tag.get_ndef_message();
        auto records = message->get_records();
        for (auto &record : records) {
          std::string payload = record->get_payload();
          size_t pos = payload.find("https://www.home-assistant.io/tag/");
          if (pos != std::string::npos) {
            return payload.substr(pos + 34);
          }
        }
        ESP_LOGD("tagreader", "Bad NDEF, fallback to uid");
        return x;
    - if:
        condition:
          switch.is_on: buzzer_enabled
        then:
        - rtttl.play: ${sound_scan_success}
    - if:
        condition:
          switch.is_on: led_enabled
        then:
        - light.turn_on:
            id: activity_led
            brightness: 100%
            red: 0%
            green: 100%
            blue: 0%
            flash_length: 500ms


# Define the buzzer output
output:
- platform: esp8266_pwm
  id: buzzer
  pin: ${pin_buzzer}


binary_sensor:
- platform: status
  name: Status


# Define buzzer as output for RTTTL
rtttl:
  output: buzzer


# Configure LED
light:
- platform: neopixelbus
  name: Activity LED
  id: activity_led
  type: RGB
  variant: WS2812
  pin: ${pin_activity_led}
  num_leds: 1
  default_transition_length: 10ms
  restore_mode: ALWAYS_OFF
