substitutions:
  devicename: deurbelindicator
  friendly_name: Deurbel Indicator

  pin_button_red: D1
  pin_button_green: D2
  pin_led_red: D3
  pin_led_green: D4
  pin_buzzer: D8

  song_onboot: 'two short:d=4,o=5,b=100:16e6,16e6'
  song_phonering: 'Phonering:d=32,o=7,b=200:a,f,a,f,a,f,a,f,a,f,a,f,a,f,a,f,a,p,p,f,a,f,a,f,a,f,a,f,a,f,a,f,a,f,a,f,a,f,a,f,a,f'
  song_starwars: "StarWars:d=4,o=5,b=45:32p,32f#,32f#,32f#,8b.,8f#.6,32e6,32d#6,32c#6,8b.6,16f#.6,32e6,32d#6,32c#6,8b.6,16f#.6,32e6,32d#6,32e6,8c#.6,32f#,32f#,32f#,8b.,8f#.6,32e6,32d#6,32c#6,8b.6,16f#.6,32e6,32d#6,32c#6,8b.6,16f#.6,32e6,32d#6,32e6,8c#6"
  song_getready: 'Get ready:d=4,o=5,b=125:8g.,8g.,8g,8c,8c,8d,8d,8g.,8g.,8g,8a#,8a#,8c6,8c6,8g.,8g.,8g,8c,8c,8d,8d,8g.,8g.,8g,8a#,8a#,8c6,8d6'
  song_sweetchild: 'Sweet Child:d=8,o=5,b=140:d,d6,a,g,g6,a,f#6,a,d,d6,a,g,g6,a,f#6,a,e,d6,a,g,g6,a,f#6,a,e,d6,a,g,g6,a,f#6,a'
  song_lightmyfire: 'LightMyFire:d=4,o=5,b=140:8b,16g,16a,8b,8d6,8c6,8b,8a,8g,8a,16f,16a,8c6,8f6,16d6,16c6,16a#,16g,8g#,8g,8g#,16g,16a,8b,8c#6,16b,16a,16g,16f,8e,8f,1a'
  song_equador: 'Equador:d=4,o=5,b=140:8g.,8d.,8a#,8a,8c6,8a,8f,8g.,8d.,8a#,8a,8c6,8a,8f,8a#.,8f.,8d6,8c6,8d6,8c6,8a,8a#.,8g.,8a#,8a,8a#,8a,8f'
  song_ateam: 'A-Team:d=8,o=5,b=125:4d#6,a#,2d#6,16p,g#,4a#,4d#.,p,16g,16a#,d#6,a#,f6,2d#6,16p,c#.6,16c6,16a#,g#.,2a#'


packages:
  wifi: !include common/wifi.yaml
  always: !include common/always.yaml


esphome:
  name: ${devicename}
  friendly_name: ${friendly_name}
  platform: ESP8266
  board: d1_mini
  on_boot:
    priority: -10
    then:
      - while:
          condition:
            not:
              api.connected:
          then:
            - light.toggle:
                id: light_red
                transition_length: 5ms
            - light.toggle:
                id: light_green
                transition_length: 5ms
            - delay: 100ms
      - light.turn_off:
          id: light_red
      - light.turn_off:
          id: light_green
      - logger.log: API is connected
      - rtttl.play:
          rtttl: ${song_onboot}
      - switch.turn_on:
          id: buzzer_enabled


select:
  - platform: template
    id: sound_selector
    name: Sound Selector
    optimistic: True
    options:
      - Phonering
      - Starwars
      - Get Ready
      - Sweet Child
      - Light My Fire
      - Equador
      - A-Team
        

# Enable Home Assistant API
api:
  # Define services to use from HA
  services:

    # Service to play RTTTL
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

    # Service to start blinking red LED
    - service: start_blink_red
      then:
        - script.execute: start_blink_red

    # Service to stop blinking red LED
    - service: stop_blink_red
      then:
        - script.execute: stop_blink_red

    # Service to start blinking green LED
    - service: start_blink_green
      then:
        - script.execute: start_blink_green

    # Service to stop blinking green LED
    - service: stop_blink_green
      then:
        - script.execute: stop_blink_green
        
    # Service to indicate doorbell has been rung
    - service: indicate_doorbell
      then:
        - script.execute: indicate_doorbell


output:

  # Red LED
  - platform: esp8266_pwm
    id: red_led_pwm
    pin: ${pin_led_red}

  # Green LED
  - platform: esp8266_pwm
    id: green_led_pwm
    pin: ${pin_led_green}

  # Buzzer
  - platform: esp8266_pwm
    pin: ${pin_buzzer}
    id: rtttl_out


light:

  # Red light - dimmable
  - platform: monochromatic
    id: light_red
    output: red_led_pwm
    restore_mode: ALWAYS_OFF
    effects:
      - strobe:

  # Green light - dimmable
  - platform: monochromatic
    id: light_green
    name: Green LED
    output: green_led_pwm
    restore_mode: ALWAYS_OFF
    effects:
      - strobe:
      - lambda:
          name: Heartbeat
          update_interval: 75ms
          lambda: |-
            static float t = 0;
            float s1 = sin(t*0.5);
            float s2 = sin(t*0.5 + 0.64);
            float brightness = max(min((pow(s1, 45.0) * s1) + (pow(s2, 45.0) * s2 * 0.3), 1.0), 0.0);
            auto call = id(light_green).turn_on();
            call.set_transition_length(100);
            call.set_brightness(brightness);
            call.set_publish(false);
            call.set_save(false);
            call.perform();
            
            // RESOLUTION
            t += 0.314;
            if (t > 6.283)
              t = 0;


# Buzzer output can play RTTTL format
rtttl:
  output: rtttl_out
  on_finished_playback:
    - logger.log: 'Song ended!'


# Define switch to control buzzer from HA
switch:
  - platform: template
    name: Sound Enabled
    id: buzzer_enabled
    icon: mdi:volume-high
    optimistic: true
    restore_mode: ALWAYS_ON


binary_sensor:

  # Red button
  - platform: gpio
    id: red_button
    pin:
      number: ${pin_button_red}
      inverted: True
      mode: INPUT_PULLUP
    filters:
      # Debounce
      - delayed_on: 10ms
    on_press:
      then:
        - script.execute: stop_blink_red
        - script.execute: stop_blink_green

  # Green button
  - platform: gpio
    id: green_button
    name: Green Button
    pin:
      number: ${pin_button_green}
      inverted: True
      mode: INPUT_PULLUP
    filters:
      # Debounce
      - delayed_on: 10ms
    on_press:
      then:
        - light.turn_on:
            id: light_green
            effect: Sine


script:

  # Script to make light_red blink
  - id: start_blink_red
    then:
      - while:
          condition:
            lambda: 'return true;'
          then:
          - light.turn_on:
              id: light_red
              transition_length: 500ms
          - delay: 500ms
          - light.turn_off:
              id: light_red
              transition_length: 500ms
          - delay: 500ms

  # Script to make light_red stop blinking
  - id: stop_blink_red
    then:
      - rtttl.stop:
      - script.stop: start_blink_red
      - light.turn_off: light_red

  # Script to make light_green blink
  - id: start_blink_green
    then:
      - while:
          condition:
            lambda: 'return true;'
          then:
          - light.turn_on:
              id: light_green
              transition_length: 500ms
          - delay: 1500ms
          - light.turn_off:
              id: light_green
              transition_length: 100ms
          - delay: 1500ms

  # Script to make light_green stop blinking
  - id: stop_blink_green
    then:
      - script.stop: start_blink_green
      - light.turn_off: light_green

  - id: indicate_doorbell
    then:
      - if:
          condition:
            switch.is_on: buzzer_enabled
          then:
            - rtttl.play:
                rtttl: !lambda |-
                  auto index = id(sound_selector).active_index();
                  if (index == 0) {
                    return "${song_phonering}";
                  } else if (index == 1) {
                    return "${song_starwars}";
                  } else if (index == 2) {
                    return "${song_getready}";
                  } else if (index == 3) {
                    return "${song_sweetchild}";
                  } else if (index == 4) {
                    return "${song_lightmyfire}";
                  } else if (index == 5) {
                    return "${song_equador}";
                  } else if (index == 6) {
                    return "${song_ateam}";
                  } else {
                    return "${song_onboot}";
                  }

      - script.execute: start_blink_red
