globals:
  - # The message to display when an alert is shown
    id: glob_alert_message
    type: std::string
    restore_value: false
    initial_value: '""'
  - # The speed of the alert, it's the delay in ms after each update
    id: glob_alert_speed
    type: int
    restore_value: false
    initial_value: '100'


esphome:
  name: ${devicename}
  friendly_name: ${friendly_name}
  platform: ESP8266
  board: d1_mini
  on_boot:
    priority: -10
    then:
      - wait_until:
          api.connected:
      - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
      - switch.template.publish:
          id: ticker_on_off
          state: ON
      - delay: 1s
      - script.execute:
          id: display_page
          page_number: 1

  includes:
    - common/slideclock.h
    - common/slidefonts.h


packages:
  always: !include always.yaml
  wifi: !include wifi.yaml
  mqtt: !include mqtt.yaml
  hardware: !include ticker-hardware.yaml


api:
  services:
    # Displays next page (cycles)
  - service: display_next_page
    then:
      - script.execute: display_next_page

    # Displays specified page
  - service: display_page
    variables:
      page: int
    then:
      - number.set:
          id: page_number
          value: !lambda 'return page;'
      - component.update: ticker_display

    # Plays an rtttl tune
  - service: play_rtttl
    variables:
      song_str: string
    then:
      - rtttl.play: !lambda 'return song_str;'

    # Scrolls an alert message
  - service: alert
    variables:
      input_text: string
      speed: int
      duration: int
    then:
      - globals.set:
          id: glob_alert_message
          value: !lambda 'return input_text;'
      - globals.set:
          id: glob_alert_speed
          value: !lambda 'return speed;'
      - script.execute:
          id: display_page
          page_number: 5
      - delay: !lambda return duration * 1000;
      - script.execute:
          id: display_page
          page_number: 1


time:
  - platform: homeassistant
    id: hass_time


sensor:
  - platform: homeassistant
    id: current_power_usage
    internal: True
    entity_id: sensor.electriciteit_netto_verbruik_in_watt


binary_sensor:
  - platform: homeassistant
    id: contact_voordeur
    internal: True
    entity_id: binary_sensor.contact_voordeur_contact
  - platform: homeassistant
    id: contact_achterdeur
    internal: True
    entity_id: binary_sensor.contact_achterdeur_contact

  - platform: homeassistant
    id: contact_raam_martijn
    internal: True
    entity_id: binary_sensor.contact_slaapkamerraam_martijn_contact
  - platform: homeassistant
    id: contact_raam_abel
    internal: True
    entity_id: binary_sensor.contact_slaapkamerraam_abel_contact
  - platform: homeassistant
    id: contact_raam_marjolein
    internal: True
    entity_id: binary_sensor.contact_zolderraam_contact

  - platform: homeassistant
    id: contact_bergingdeur
    internal: True
    entity_id: binary_sensor.contact_bergingdeur_contact
  - platform: homeassistant
    id: contact_trapdeur
    internal: True
    entity_id: binary_sensor.contact_trapdeur_contact
  - platform: homeassistant
    id: contact_achtergevel_raam
    internal: True
    entity_id: binary_sensor.contact_achtergevelraam_contact


text_sensor:
  - platform: homeassistant
    id: person_martijn
    internal: True
    entity_id: person.martijn_donath
  - platform: homeassistant
    id: person_veerle
    internal: True
    entity_id: person.veerle
  - platform: homeassistant
    id: person_marjolein
    internal: True
    entity_id: person.marjolein
  - platform: homeassistant
    id: person_abel
    internal: True
    entity_id: person.abel

  - platform: homeassistant
    id: internet_abel
    internal: True
    entity_id: switch.internet_apparaten_abel
  - platform: homeassistant
    id: internet_marjolein
    internal: True
    entity_id: switch.internet_apparaten_marjolein
  - platform: homeassistant
    id: internet_veerle
    internal: True
    entity_id: switch.internet_apparaten_veerle


number:
    # Configure page to show
  - platform: template
    name: Page
    id: page_number
    optimistic: true
    restore_value: true
    initial_value: 1
    min_value: 0
    max_value: 5
    step: 1

    # Configure Brightness of the display [0-15]
  - platform: template
    name: Brightness
    id: brightness
    entity_category: config
    optimistic: true
    restore_value: true
    initial_value: 1
    min_value: 0
    max_value: 15
    step: 1

    # Configure Pause in ms before starting to scroll
  - platform: template
    name: Scroll Delay
    id: scroll_delay
    entity_category: config
    optimistic: true
    restore_value: true
    initial_value: 0
    min_value: 0
    max_value: 5000
    step: 100

    # Configure Pause in ms after scrolling all text in Continuous mode
  - platform: template
    name: Scroll Dwell
    id: scroll_dwell
    entity_category: config
    optimistic: true
    restore_value: true
    initial_value: 0
    min_value: 0
    max_value: 5000
    step: 100


select:
    # Configure Scrollmode: continuous or stop (at end)
  - platform: template
    id: scroll_mode
    name: Scroll Mode
    entity_category: config
    optimistic: true
    initial_option: CONTINUOUS
    options:
      - CONTINUOUS
      - STOP


switch:
    # UI Switch to turn display on/off
  - platform: template
    name: Switch
    id: ticker_on_off
    icon: "mdi:clock-digital"
    turn_off_action:
      - switch.template.publish:
          id: ticker_on_off
          state: OFF
      - script.execute:
          id: display_page
          page_number: 0
    turn_on_action:
      - switch.template.publish:
          id: ticker_on_off
          state: ON
      - script.execute:
          id: display_page
          page_number: 1


button:
    # UI Button to select next page to display
  - platform: template
    name: Next Page
    on_press:
      then:
        - script.execute: display_next_page


script:
    # Shows next page
  - id: display_next_page
    then:
      - if:
          condition:
            switch.is_on: ticker_on_off
          then:
            - if:
                condition:
                  number.in_range:
                    id: page_number
                    above: 1
                    below: 3
                then:
                  - number.increment: page_number
                else:
                  - number.set:
                      id: page_number
                      value: 1
            - component.update: ticker_display

    # Show page with specified number [0-5]
  - id: display_page
    parameters:
      page_number: int
    then:
      - number.set:
          id: page_number
          value: !lambda return page_number;
      - component.update: ticker_display

    # Action when the Select Button is pressed
  - id: select_button
    then:
      - script.execute: display_next_page

    # Action when the Action Button is pressed
  - id: action_button
    then:
      - if:
          condition:
            lambda: 'return id(page_number).state == 1;'
          then:
            - if:
                condition:
                  number.in_range:
                    id: brightness
                    above: 1
                then:
                  - number.set:
                      id: brightness
                      value: 0
                else:
                  - number.set:
                      id: brightness
                      value: 3
      - if:
          condition:
            lambda: 'return id(page_number).state == 2;'
          then:
            - rtttl.play: "success:d=24,o=5,b=100:c,c,c"
